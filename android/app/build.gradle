apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    bundleAssetName: "index.android.bundle",
    entryFile: "index.js",

    bundleInRelease: true,
    devDisabledInRelease: true,

    bundleInDebug: false,
    devDisabledInDebug: false,

    bundleInStaging: true,
    devDisabledInStaging: false,

    bundleInEnvTestStaging: true,
    devDisabledInEnvTestStaging: false,
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.cityguide"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        if (System.env.VERSION_CODE != null) {
            versionCode System.env.VERSION_CODE.toInteger()
            versionName '1.0.' + System.env.VERSION_CODE
        } else {
            versionCode 1
            versionName '1.0.0'
        }
    }
    signingConfigs {
        test {
            if (System.env.TEST_KEYSTORE_LOCATION != null) {
                storeFile file(System.env.TEST_KEYSTORE_LOCATION)
                storePassword System.env.TEST_KEYSTORE_PASSWORD
                keyAlias System.env.TEST_KEYSTORE_KEY_ALIAS
                keyPassword System.env.TEST_KEYSTORE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    flavorDimensions 'env'
    productFlavors {
        envProduction {
            dimension 'env'
        }
        envTest {
            dimension 'env'
            applicationIdSuffix '.test'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
        }
        staging {
            minifyEnabled false
            signingConfig signingConfigs.test
            applicationIdSuffix '.staging'
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.facebook.react:react-native:+'

    compile 'net.hockeyapp.android:HockeySDK:5.1.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
